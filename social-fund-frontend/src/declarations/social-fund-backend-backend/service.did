type EmployeeDetails = record {
    name: text;
    position: text;
    salary: nat64;
};

type EmployerDetails = record {
    company_name: text;
    registration_number: text;
};

type UserDetails = record {
    user_principal: principal;
    role: text;
    authenticated_at: nat64;
    employee_details: opt EmployeeDetails;
    employer_details: opt EmployerDetails;
};

type Transaction = record {
    tx_id: nat64;
    user: principal;
    tx_type: text;
    amount: nat64;
    timestamp: nat64;
};

type FundInfo = record {
    total_fund: nat64;
    ckbtc_reserve: nat64;
    stable_reserve: nat64;
    threshold: nat64;
    contributors: vec record { principal; nat64 };
    total_contributions: vec record { principal; nat64 };
    withdrawal_records: vec record { principal; record { nat64; nat64 } };
};

type NextOfKin = record {
    name: text;
    relationship: text;
    contact_info: text;
};

service : {
    authenticate: (principal) -> (variant { Ok: text; Err: text });
    authenticate_with_details: (principal, text, opt EmployeeDetails, opt EmployerDetails) -> (variant { Ok: UserDetails; Err: text });
    is_authenticated: (principal) -> (bool) query;
    get_authenticated_user: (principal) -> (opt UserDetails) query;
    get_fund_info: () -> (FundInfo) query;
    get_user_role: (principal) -> (text) query;
    get_next_of_kin: (principal) -> (opt NextOfKin) query;
    set_user_role: (principal, text) -> (variant { Ok: text; Err: text });
    add_next_of_kin: (principal, NextOfKin) -> (variant { Ok: text; Err: text });
    contribute: (nat64, principal) -> ();
    request_withdrawal: (nat64, principal) -> (variant { Ok: text; Err: text });
    borrow_ckbtc: (nat64, principal) -> (variant { Ok: text; Err: text });
    apply_for_loan: (nat64, principal) -> (variant { Ok: text; Err: text });
    employer_match: (principal, nat64) -> ();
    vote_on_proposal: (nat64, bool, principal) -> (variant { Ok: text; Err: text });
    check_rewards: (principal) -> (nat64) query;
    redeem_rewards: (principal) -> (variant { Ok: text; Err: text });
    stake_stable_assets: (nat64) -> (variant { Ok: text; Err: text });
    collect_yield: () -> ();
    apply_interest: () -> ();
    get_transactions: () -> (vec Transaction) query;
    logout: (principal) -> (variant { Ok: text; Err: text });
} 